# -*- coding: utf-8 -*-
"""Exercise Sheet 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TJTnsK1GNkdkB-TDtovrT0FzOPaKV8iZ

# Selection Problems Genetic Algorithms

In this exercise sheet we explore the use of genetic algorithms to solve selection type problems.

Each object in a list of object will either be selected or not..

The individuals in the genetic algorithm for these problems will be a selection of these objects, where the chromosome could be a list of 1 (i.e. True) or 0 (i.e. False).

But, to save memory, we will have a chromosome of True or False entries rather than the number 1 or 0.

**Exercise 1**  Why does this save memory? If we wished to use 0's and 1's how would these be stored?
"""

import numpy as np

help(np.random.choice)

np.random.choice([True,False],1000)

"""**Exercise 2**  Use np.random.choice to create an array of size 1000 of True or False values

**Exercise 3**  Incorporate into the problem and individual class shells' below

"""

class problem:
  def __init__(self):
    self.number_of_genes = 1000
    self.cost_function = None




class individual:
  # This class defines the individual for the genetic algorithm. We hope to find the individual which solves our problem
  chromosone = None

  def __init__(self, prob):    #  This is the constructor for the individual and as such needs the problem to mould the individuals to it
    #Create a random individual.
    self.chromosone =np.random.choice([True,False],prob.number_of_genes)


  def crossover(self,other_parent):
    return []

  def mutate(self,mutation_rate, mutation_range = 0):

    return

p = problem()

p.number_of_genes = 10

ind1 = individual(p)

ind1.chromosone

"""**Exercise 4**  Use np.random.uniform to create an array of 1000 floating point values between 1 and 10, and store in the variable **weights**

**Exercise 5**  How would you find the total weight of an individuals selection?

"""



"""**Exercise 6**  Use np.random.randint to create an array of 1000 integer values between 0 and 50, and store in the variable **values**

**Exercise 7**  How would you find the total value of an individuals selection?

**Exercise 8**   What is the total weight and value of all items?
"""



"""**Exercise 9**  Implement the mutate method for this. Is there any other way mutation could be done for these types of problems?"""



"""**Exercise 10**  Implement the crossover method with 1 crossover point.  With more than 1 crossover point?

"""



"""**Exercise 11**  Use the run_genetic algorithm to find the most valuable selection of items with a combined weight of less than 60."""

