# -*- coding: utf-8 -*-
"""Genetic 24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UG2VZ08yM7srhN8Hha3hXAfInn5D6byg
"""

import numpy as np

ind1 = np.random.uniform(-10,10,8)

ind2 = np.random.uniform(-10,10,8)

ind1

ind2

sphere(ind1)

sphere(ind2)

def sphere(x):
  total = 0
  for i in x:
    total+= i**2

  return total

class problem:
  def __init__(self):
    self.number_of_genes = 8
    self.max_value = 10
    self.min_value = -10
    self.cost_function = sphere

sphere(x)

np.random.uniform()

class individual:
  def __init__(self,prob):
    self.chromosome = np.random.uniform(prob.min_value, prob.max_value,prob.number_of_genes)
    self.cost = prob.cost_function(self.chromosome)

  def mutate(self, rate_of_gene_mutation,range_of_gene_mutation):
    for index in range(len(self.chromosome)):
      if  np.random.uniform() < rate_of_gene_mutation:
        self.chromosome[index] += np.random.randn() * range_of_gene_mutation

p1=problem()

p1.number_of_genes

indX = individual(p1)

indX.chromosome

indX.cost

indX.mutate(0.25,2)

indX.chromosome

